#! /usr/bin/bash


################################################################
# VARIABLES NEEDED THROUGHOUT THE SETUP, ALSO SETTABLE VIA 
# ENVIRONMENT VARIABLES WHEN FIRST CREATING THE CONTAINER
################################################################

upload_max_filesize="${PHP_MAX_FILE_SIZE:-80M}"

post_max_size="${PHP_MAX_POST_SIZE:-80M}"

memory_limit="${PHP_MEMORY_LIMIT:-1024M}"

max_execution_time="${PHP_MAX_EXECUTION_TIME:-60}"

db_user="${DB_USER:-cqpweb_user}" 

db_user_password="${DB_USER_PASSWORD:-cqpweb_password}"

db_name="${DB_NAME:-cqpweb_db}"

cqpweb_user="${CQPWEB_USER:-admin}"

cqpweb_user_password="${CQPWEB_USER_PASSWORD:-cqpwebsecurepassword}"  

################################################################
################################################################
################################################################
# FOLLOWING HERE IS THE INITIAL SETUP OF THE CONTAINER WHICH 
# SHOULD ONLY RUN WHEN RUNNING A CONTAINER FOR THE FIRST TIME
################################################################
################################################################
################################################################

if ! [[ -f "/etc/cqpweb_got_created.conf" ]]; then

# Create cqpweb directories after a potential mapping of local directories
if ! [[ -f "/cqpweb_files/data" ]]; then
mkdir -p /cqpweb_files/data
fi

if ! [[ -f "/cqpweb_files/registry" ]]; then
mkdir -p /cqpweb_files/registry
fi

if ! [[ -f "/cqpweb_files/temp" ]]; then
mkdir -p /cqpweb_files/temp
fi

if ! [[ -f "/cqpweb_files/uploads" ]]; then
mkdir -p /cqpweb_files/uploads
fi

if ! [[ -f "/cqpweb_files/databases" ]]; then
mkdir -p /cqpweb_files/databases
fi

# Adjust permissions of /cqpweb_files after a possible mapping of data
chown -R www-data:www-data /cqpweb_files

# Copy mysql files from the installation/initialization over to 
# the new database directory

mv /var/lib/mysql/* /cqpweb_files/databases/
chown -R mysql:mysql /cqpweb_files/databases
service mysql start

################################################################
# ADJUST PHP's WEBSERVER-, CLI- AND MYSQL-RELATED SETTINGS
################################################################

# Max upload size needs to be adjusted for CLI and web PHP
sed -i "/upload_max_filesize = */c\\upload_max_filesize = $upload_max_filesize" /etc/php/7.4/cli/php.ini
sed -i "/upload_max_filesize = */c\\upload_max_filesize = $upload_max_filesize" /etc/php/7.4/apache2/php.ini

# Max post size needs to be adjusted for CLI and web PHP
sed -i "/post_max_size = */c\\post_max_size = $post_max_size" /etc/php/7.4/cli/php.ini
sed -i "/post_max_size = */c\\post_max_size = $post_max_size" /etc/php/7.4/apache2/php.ini

# Memory limit needs to be adjusted for CLI and web PHP
sed -i "/memory_limit = */c\\memory_limit = $memory_limit" /etc/php/7.4/cli/php.ini
sed -i "/memory_limit = */c\\memory_limit = $memory_limit" /etc/php/7.4/apache2/php.ini

# Max execution time needs to be adjusted for CLI and web PHP
sed -i "/max_execution_time = */c\\max_execution_time = $max_execution_time" /etc/php/7.4/apache2/php.ini
sed -i "/max_execution_time = */c\\max_execution_time = $max_execution_time" /etc/php/7.4/cli/php.ini

# MySQLi settings need to be adjusted for CLI and web PHP
sed -i "/;mysqli.allow_local_infile = */c\\mysqli.allow_local_infile = On" /etc/php/7.4/cli/php.ini
sed -i "/;mysqli.allow_local_infile = */c\\mysqli.allow_local_infile = On" /etc/php/7.4/apache2/php.ini

touch /etc/cqpweb_got_created.conf
echo "THIS FILE MANAGES THE SETUP STRATEGY OF THIS CONTAINER. DO NOT RENAME, MOVE OR DELETE IT!" >> /etc/cqpweb_got_created.conf



################################################################
# CONFIGURE CWB, CQPWEB AND FINALIZE THE SETUP
################################################################

# Start database server and create database and user for CQPweb
mysql -se "create database ${db_name} default charset utf8;
create user ${db_user} identified by '${db_user_password}';
grant all on ${db_name}.* to ${db_user};
grant file on *.* to ${db_user};"

# Create CQPweb's config file using the autoconfig.php script
cd /var/www/html/bin
php autoconfig.php << EOF
$cqpweb_user
n
/cqpweb_files/data
/cqpweb_files/registry
/cqpweb_files/temp
/cqpweb_files/uploads
$db_user
$db_user_password
y
$db_name
localhost
y
EOF

# Create database schemes and finalize CQPweb's setup using the autosetup.php script 
php autosetup.php << EOF
$cqpweb_user_password
y
EOF

################################################################
# If FQDN and Email-Address have been provided, issue an SSL 
# certificate using certbot
################################################################

if ! ([[ -z "${FQDN_NAME}" ]] && [[ -z "${FQDN_EMAIL}" ]]); then

# Install certbot
curl -O https://dl.eff.org/certbot-auto
mv certbot-auto /usr/local/bin/certbot-auto
chmod 0755 /usr/local/bin/certbot-auto

# Create a virtual host for Apache2 to handle http-requests
echo -e "<VirtualHost *:80>\n
ServerName ${FQDN_NAME}\n
ServerAlias www.${FQDN_NAME}\n
DocumentRoot /var/www/html/\n
\n
<Directory /var/www/html/>\n
Options FollowSymLinks\n
AllowOverride None\n
Require all granted\n
</Directory>\n
\n
<Directory /var/www/html/bin/>\n
deny from all\n
</Directory>\n
\n
<Directory /var/www/html/lib/>\n
deny from all\n
</Directory>\n
\n
ErrorLog /var/log/apache2/www.${FQDN_NAME}-error.log\n
CustomLog /var/log/apache2/www.${FQDN_NAME}-access.log combined\n
</VirtualHost>" >> /etc/apache2/apache2.conf
service apache2 restart

# Let certbot issue a certificate and configure Apache2 
certbot-auto --apache --force-interactive << EOF
y
$FQDN_EMAIL
A
N

2
EOF

# Save date of creation for automatic re-issuing of certificate
echo date >> /etc/apache2/date_of_ssl_creation.info
fi

fi
################################################################
################################################################
################################################################
# THIS IS WHERE THE INITIAL SETUP ENDS AND THE NORMAL STARTUP
# ROUTINE FOLLOWS
################################################################
################################################################
################################################################



################################################################
# START SERVICES AND MAKE CONTAINER STAY ALIVE
################################################################


# Clean mysql sockets to prevent database crash on startup
if [[ -f /var/run/mysqld/mysqld.sock.lock ]]; then
echo "Deleting locked MySQL socket..."
rm /var/run/mysqld/mysqld.sock.lock
fi

# Start services
if ! [[ -f /var/run/mysqld/mysqld.sock ]]; then
echo "No running MySQL instance found, starting MySQL..."
service mysql start
fi

service apache2 start

# Check if SSL-certificate should be renewed
bash /docker-scripts/check_ssl_expiration

# Make container run endlessly
tail -f /dev/null
