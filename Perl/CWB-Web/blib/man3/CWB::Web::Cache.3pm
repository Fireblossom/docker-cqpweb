.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB::Web::Cache 3"
.TH CWB::Web::Cache 3 "2022-05-07" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CWB::Web::Cache \- A simple shared cache for CQP query results
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use CWB::CQP;
\&  use CWB::Web::Cache;
\&
\&  $cqp = new CWB::CQP;
\&  $cache = new CWB::Web::Cache \-cqp => $cqp, \-cachedir => $dir,
\&    [\-cachesize => $cache_size,] [\-cachetime => $expiration_time];
\&
\&  # transparently execute and cache simple CQP queries
\&  $id = $cache\->query(\-corpus => "DICKENS", \-query => \*(Aq[pos="NN"] "of" "England"\*(Aq);
\&  ($size) = $cqp\->exec("size $id");
\&
\&  # optional features: sort clause, set keyword, subquery, and maximal number of matches
\&  $id = $cache\->query(
\&    \-corpus => "DICKENS", \-query => $query,
\&    \-sort => $sort_clause,
\&    \-keyword => $set_keyword_command,
\&    \-subquery => $subquery,
\&    \-cut => $max_nr_of_matches  # resonable default calculated from cache size
\&  );
\&
\&
\&  ## The functions below are for internal use only and subject to change in future releases!
\&  $id = $cache\->store("DICKENS:Query1");        # activates DICKENS corpus
\&  $id = $cache\->store("DICKENS:Query1", "Metadata line #1", ...);
\&
\&  $size = $cache\->retrieve($id);                # (re\-)activates DICKENS corpus
\&  die \*(AqSorry, named query has expired from the cache.\*(Aq
\&    unless defined $size;
\&  $cqp\->exec("Query1 = $id");                   # copy query result to desired name
\&
\&  $id = $cache\->retrieve("DICKENS:Query", "Metadata line #1", ...);
\&  die \*(AqSorry, no named query matching your metadata found in cache.\*(Aq
\&    unless defined $id;
\&  $cqp\->exec("Query = $id");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBCWB::Web::Cache\fR module provides a simple shared caching meachnism
for \s-1CQP\s0 query results, making them persistent across multiple \s-1CQP\s0 sessions.
Old data files are automatically deleted when they pass the specified \fI\f(CI$expiration_time\fI\fR, or
to keep the cache from growing beyond the specified \fI\f(CI$cache_size\fI\fR limit.
.PP
Note that a \fBCWB::Web::Cache\fR handle must be created with a pre-initialised \s-1CQP\s0 backend (i.e.
a \fB\s-1CWB::CQP\s0\fR object), which will be used to access the cache and (re\-)run a query when necessary.
.PP
Most scripts will access the cache through the \fB\fBquery()\fB\fR method, which executes and caches \s-1CQP\s0 queries
in a fully transparent way (with optional \f(CW\*(C`sort\*(C'\fR clause, \f(CW\*(C`set keyword\*(C'\fR command, subquery,
and \f(CW\*(C`cut\*(C'\fR to limit the maximal number of matches).  After successful execution, the query result is
loaded into the \s-1CQP\s0 backend, the appropriate corpus is activated, and the \fI\f(CI$id\fI\fR of the named query is
returned.
.PP
Starting from version 3.4.15, the \f(CW\*(C`sort\*(C'\fR clause is executed \fIafter\fR a \f(CW\*(C`set keyword\*(C'\fR command
so that \f(CW\*(C`keyword\*(C'\fR anchors can be used in sorting.
.PP
Direct access to cache entries is provided by the low-level methods \fB\fBstore()\fB\fR and \fB\fBretrieve()\fB\fR.
Note that these are intended for internal use only and may change in future releases.
.SH "METHODS"
.IX Header "METHODS"
\&\fB\s-1TODO\s0\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1999\-2020 Stefan Evert [http::/purl.org/stefan.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
