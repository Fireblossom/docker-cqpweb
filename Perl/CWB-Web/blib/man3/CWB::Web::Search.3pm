.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB::Web::Search 3"
.TH CWB::Web::Search 3 "2022-05-07" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  CWB::Web::Search \- A WWW search style front\-end to the CWB
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use CWB::Web::Search;
\&
\&  # typically, a search object is used for a single search only
\&  $search = new CWB::Web::Search \*(AqWEB\-SITE\-INDEX\*(Aq;
\&  # here, \*(Aqweb\-site\-index\*(Aq is a CWB\-encoded corpus containing the
\&  # textual content of an indexed WWW site
\&
\&  $search\->window("1 document"); # search window 
\&  $search\->context("document");  # match context returned as HTML
\&  # window and context size are specified in CQP syntax
\&  $search\->data("url", "date");  # values of s\-attributes are returned
\&  # here, markup is <url http://...> and <date 13 Oct 1999>
\&  $search\->ignore_case(1);       # case\-insensitive search
\&  $search\->ignore_diacritics(1); # search ignores diacritics
\&  $search\->cull(\*(Aqafter\*(Aq);        # remove duplicate documents (context)
\&  $search\->highlight(\*(Aq<font color=red>\*(Aq); # HTML highlighting tag
\&
\&  # run query \- returns number of matches (for convenience)
\&  $nr_matches = $search\->query("+editor", "free", "GNU", "\-Microsoft");
\&  # look for documents containing the word \*(Aqeditor\*(Aq, preferably
\&  # \*(Aqfree\*(Aq or \*(AqGNU\*(Aq as well, and not containing \*(AqMicrosoft\*(Aq
\&  $nr_matches = $search\->size;  # same as number returned by query()
\&
\&  # alternatively, let WebSearch::Search parse the query string
\&  $nr_matches = $search\->query_string("+editor free GNU \-Microsoft");
\&
\&  # typical result processing loop
\&  for ($i = 0; $i < $nr_matches; $i++) {
\&    $nr = $i + 1;               # match number
\&    $m = $search\->match($i);    # returns result struct without \*(Aqcontext\*(Aq
\&    $m\->{\*(Aqcpos\*(Aq};               # corpus position of match centre
\&    $m\->{\*(Aqquality\*(Aq};            # relevance of this match
\&    $m\->{\*(Aqsummary\*(Aq};            # summary of match (HTML encoded)
\&    $m\->{\*(Aqdata\*(Aq}\->{\*(Aqurl\*(Aq};      # requested data values
\&    $m\->{\*(Aqdata\*(Aq}\->{\*(Aqdate\*(Aq};
\&    if ($want_context) {
\&      $m = $search\->match($i, \*(Aqcontext\*(Aq);
\&      $m\->{\*(Aqcontext\*(Aq};          # match with context (HTML encoded)
\&    }
\&  }
\&
\&  undef $search;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fICWB::Web::Search\fR module executes simple queries similar to
commercial Web search engines on CWB-encoded corpora. The \fI\f(BIquery()\fI\fR method
returns \fIkeywords\fR found in the corpus with the requested amount of
context in \s-1HTML\s0 format. Additionally, data stored in structural
attributes can be returned. Typically, a \s-1CGI\s0 script will create a
\&\fICWB::Web::Search\fR object for a single query.
.SH "ERRORS"
.IX Header "ERRORS"
If the \fICWB::Web::Search\fR module encounters an error condition, an error
message is printed on \f(CW\*(C`STDERR\*(C'\fR and the program is terminated. A user-defined
error handler can be installed with the \fI\f(BIon_error()\fI\fR method. In this case,
the error callback function is passed the error message generated by the module
as a list of strings.
.SH "CORPUS REGISTRY"
.IX Header "CORPUS REGISTRY"
If you need to use a registry other than the default corpus registry,
you should change the setting directly in the \s-1CWB::CL\s0 module.
.PP
.Vb 2
\&  use CWB::CL;
\&  $CWB::CL::Registry = "/path/to/my/registry";
.Ve
.PP
This will affect all new \fICWB::Web::Search\fR objects.
.SH "RESULT STRUCTURE"
.IX Header "RESULT STRUCTURE"
The search module's \fI\f(BImatch()\fI\fR method return a \fIresult struct\fR for
the n\-th match of the last query executed. A \s-1CGI\s0 script will usually
iterate through all matches with a loop similar to this:
.PP
.Vb 5
\&    $nr_matches = $search\->query(...);
\&    for ($n = 0; $n < $nr_maches; $n++) {
\&      $m = $search\->match($n);
\&      # code for processing match data in result struct $m 
\&    }
.Ve
.PP
A \fIresult struct\fR \f(CW$m\fR has the following fields:
.ie n .IP "$m\->{'cpos'}" 4
.el .IP "\f(CW$m\fR\->{'cpos'}" 4
.IX Item "$m->{'cpos'}"
\&\fICorpus  position\fR of the \fIcentre\fR  of  this match (the \fIcentre\fR is
computed from the positions of all search \fIkeywords\fR in a match).
.ie n .IP "$m\->{'quality'}" 4
.el .IP "\f(CW$m\fR\->{'quality'}" 4
.IX Item "$m->{'quality'}"
An estimate of the \fIrelevance\fR of this match. This ranking is given as a
percentage with 100% corresponding to a \*(L"perfect match\*(R". The matches found
by the \fI\f(BIquery()\fI\fR method are sorted according to their 'quality' value.
.ie n .IP "$m\->{'summary'}" 4
.el .IP "\f(CW$m\fR\->{'summary'}" 4
.IX Item "$m->{'summary'}"
A text segment from the corpus containing most of the <keywords> found
in this match (up to a reasonable maxium length). It is returned in
\&\s-1HTML\s0 format with the \fIkeywords\fR highlighted.
.ie n .IP "$m\->{'context'}" 4
.el .IP "\f(CW$m\fR\->{'context'}" 4
.IX Item "$m->{'context'}"
The text segment from the corpus containing all <keywords> found in
this match, expanded according to the \fI\f(BIcontext()\fI\fR setting. It is
returned in \s-1HTML\s0 format with the \fIkeywords\fR highlighted.
.Sp
\&\fB\s-1NB\s0\fR The \fIcontext\fR field is only included if the \f(CW\*(Aqcontext\*(Aq\fR switch
was passed to the \fI\f(BImatch()\fI\fR method:
.Sp
.Vb 1
\&    $m = $search\->match($n, \*(Aqcontext\*(Aq);
.Ve
.Sp
See the remarks on \fIvirtual context\fR in the description of the
\&\fI\f(BIcull()\fI\fR method below.
.ie n .IP "$m\->{'data'}" 4
.el .IP "\f(CW$m\fR\->{'data'}" 4
.IX Item "$m->{'data'}"
The values of the structural attributes requested by the \fI\f(BIdata()\fI\fR 
method are returned in the subfields of the 'data' field. A typical
\&\s-1CGI\s0 application will use the 'data' field to retrieve document URLs,
e.g.
.Sp
.Vb 1
\&    $match_url = $m\->{\*(Aqdata\*(Aq}\->{\*(Aqurl\*(Aq};
.Ve
.Sp
where the search corpus contains regions like the following
.Sp
.Vb 1
\&    <url http://www.ims.uni\-stuttgart.de/> ... </url>
.Ve
.Sp
The values stored in the 'data' field are not \s-1HTML\s0 encoded.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$search = new CWB::Web::Search $corpus;" 4
.el .IP "\f(CW$search\fR = new CWB::Web::Search \f(CW$corpus\fR;" 4
.IX Item "$search = new CWB::Web::Search $corpus;"
Create \fICWB::Web::Search\fR object for \s-1WWW\s0 search queries on the
\&\s-1CWB\s0 corpus \f(CW$corpus\fR.
.ie n .IP "@results = $search\->query($key1, $key2, ... );" 4
.el .IP "\f(CW@results\fR = \f(CW$search\fR\->query($key1, \f(CW$key2\fR, ... );" 4
.IX Item "@results = $search->query($key1, $key2, ... );"
Searches corpus for the specified \fIkeywords\fR and returns a list
of matches sorted by (decreasing) relevance.
.Sp
See \*(L"\s-1RESULT STRUCTURE\*(R"\s0 for the format of the \f(CW@results\fR list.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1999\-2020 Stefan Evert [http::/purl.org/stefan.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
