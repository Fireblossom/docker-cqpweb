.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB::CQI::Server 3"
.TH CWB::CQI::Server 3 "2022-05-07" "perl v5.36.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CWB::CQI::Server \- launch private CQPserver on local machine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use CWB::CQI::Server;
\&  use CWB::CQI::Client;
\&
\&  if (cqi_server_available()) {
\&    my @details = cqi_server();
\&    cqi_connect(@details);
\&    ...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBCWB::CQI::Server\fR module can be used to launch a private CQPserver
on the local machine, which \fBCWB::CQI::Client\fR can then connect to.
.PP
Note that this is only possible if a suitable version of the \s-1IMS\s0 Open Corpus Workbench
and the \fB\s-1CWB\s0\fR Perl module have been installed.  Availability must therefore be
checked with the \fBcqi_server_available\fR function before calling \fBcqi_server\fR.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fI\f(CI$ok\fI\fR = \fBcqi_server_available\fR();" 4
.IX Item "$ok = cqi_server_available();"
Returns a \fBtrue\fR value if a suitable CQPserver binary is installed on the local machine and
can be started with the \fBcqi_server\fR function.
.IP "(\fI\f(CI$user\fI\fR, \fI\f(CI$passwd\fI\fR, \fI\f(CI$host\fI\fR, \fI\f(CI$port\fI\fR) = \fBcqi_server\fR();" 4
.IX Item "($user, $passwd, $host, $port) = cqi_server();"
.PD 0
.IP "\fI\f(CI@details\fI\fR = \fBcqi_server\fR(\fI\f(CI$flags\fI\fR);" 4
.IX Item "@details = cqi_server($flags);"
.PD
\&\f(CW\*(C`cqi_server()\*(C'\fR searches for a free port on the local machine, then  
launches a single-user \fBCQPserver\fR process and returns the connection details
required by the \fBcqi_connect\fR function from \fBCWB::CQI::Client\fR (in the appropriate order).
The simplest way to establish a connection with a private, local CQPserver is
.Sp
.Vb 1
\&    cqi_connect(cqi_server());
.Ve
.Sp
Be sure to check with \fBcqi_server_available\fR whether the required \f(CW\*(C`cqpserver\*(C'\fR
command-line program is available first.
.Sp
An optional argument to \fBcqi_server\fR is appended to the \f(CW\*(C`cqpserver\*(C'\fR command-line flags
and can be used to specify further start-up options (e.g. to read a macro definition file).
Keep in mind that arguments containing shell metacharacters need to be quoted appropriately.
.Sp
\&\fB\s-1WARNING:\s0\fR Since \fBCQPserver\fR runs as a separate process in the background, it is 
important to establish a connection \fBas soon as possible\fR. If the user's
program aborts before \fBcqi_connect\fR is called and contacts the new CQPserver,
this process will accept further connections from other users (on the local machine),
which might compromise confidential data.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 1999\-2020 Stefan Evert [http::/purl.org/stefan.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
